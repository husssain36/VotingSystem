pragma solidity ^0.8.4;

contract DStorage {
  string public name = "DStorage";
  uint public fileCount = 0;

  mapping(uint => File) public files;

  // struct of file
  struct File {
    uint fileId;
    string fileHash;
    uint fileSize;
    string fileType;
    string fileName;
    string fileDescription;
    uint uploadTime;
    address payable uploader;
  }

  // event
  event FileUploaded(
    uint fileId,
    string fileHash,
    uint fileSize,
    string fileType,
    string fileName,
    string fileDescription,
    uint uploadTime,
    address payable uploader
  );

  constructor() public {

  }

  // upload function
  function uploadFile(string memory _fileHash, uint _fileSize, string memory _fileType, string memory _fileName, string memory _fileDescription) public{

    require(bytes(_fileHash).length > 0);
    require(_fileSize > 0);
    require(bytes(_fileType).length > 0);
    require(bytes(_fileName).length > 0);
    require(bytes(_fileDescription).length > 0);
    require(msg.sender != address(0));

    fileCount++;

    files[fileCount] = File(fileCount, _fileHash, _fileSize, _fileType, _fileName,_fileDescription, block.timestamp, payable(msg.sender));

    // trigger an event
    emit FileUploaded(fileCount, _fileHash, _fileSize, _fileType, _fileName,_fileDescription, block.timestamp, payable(msg.sender));
  }


  function getFiles(uint id) external view returns (File memory) {
    return files[id];
  }
}


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

contract Election {
    string public name = "Election";

    // Model a Candidate
    struct Candidate {
        uint id;
        string name;
        uint voteCount;
    }

    // Model a Voter
    struct Voter {
        bytes image;
        bool hasVoted;
    }

    // Store accounts that have voted
    mapping(address => Voter) public voters;

    // Store Candidates
    mapping(uint => Candidate) public candidates;

    // Store Candidates Count
    uint public candidatesCount;

    // voted event
    event votedEvent (uint indexed _candidateId);

    constructor() {
        addCandidate("Narendra Modi - BJP");
        addCandidate("Rahul Gandhi - Congress");
        addCandidate("Arvind Kejriwal - Aam Aadmi Party");
    }

    function addCandidate (string memory _name) private {
        candidatesCount ++;
        candidates[candidatesCount] = Candidate(candidatesCount, _name, 0);
    }

    function vote(bytes memory _image, uint _candidateId) public {
        // require that they haven't voted before
        require(!voters[msg.sender].hasVoted);

        // require a valid candidate
        require(_candidateId > 0 && _candidateId <= candidatesCount);

        // record that voter has voted and store their image
        voters[msg.sender] = Voter(_image, true);

        // update candidate vote Count
        candidates[_candidateId].voteCount ++;

        // trigger voted event
        emit votedEvent(_candidateId);
    }
}
